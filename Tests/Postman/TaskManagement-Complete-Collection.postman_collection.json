							"path": [
								"dashboard",
								"company-overview"
							]
						}
					}
				},
				{
					"name": "Get System Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('System overview returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dashboard/system-overview",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dashboard",
								"system-overview"
							]
						}
					}
				},
				{
					"name": "Get User Performance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User performance returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dashboard/user-performance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dashboard",
								"user-performance"
							]
						}
					}
				},
				{
					"name": "Get Recent Activities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Recent activities returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dashboard/recent-activities?count=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dashboard",
								"recent-activities"
							],
							"query": [
								{
									"key": "count",
									"value": "10"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "🔔 Notification Management",
			"item": [
				{
					"name": "Get Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Notifications returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notifications');",
									"    pm.expect(jsonData.notifications).to.be.an('array');",
									"    if (jsonData.notifications.length > 0) {",
									"        pm.collectionVariables.set('notificationId', jsonData.notifications[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notification",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification"
							]
						}
					}
				},
				{
					"name": "Get Unread Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Unread count returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('unreadCount');",
									"    pm.expect(jsonData.unreadCount).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notification/unread-count",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"unread-count"
							]
						}
					}
				},
				{
					"name": "Send Test Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Test notification sent', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('notificationId');",
									"    pm.collectionVariables.set('notificationId', jsonData.notificationId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId}}\",\n    \"title\": \"API Test Notification\",\n    \"message\": \"This is a test notification sent via API\",\n    \"priority\": \"Normal\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/notification/test",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"test"
							]
						}
					}
				},
				{
					"name": "Mark Notification as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Notification marked as read', function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.include('read');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notification/{{notificationId}}/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"{{notificationId}}",
								"read"
							]
						}
					}
				},
				{
					"name": "Mark All as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('All notifications marked as read', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('All notifications');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notification/read-all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"read-all"
							]
						}
					}
				}
			]
		},
		{
			"name": "🔧 Diagnostics & Testing",
			"item": [
				{
					"name": "Test Task Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Task creation test successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('taskId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/test-task-creation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"test-task-creation"
							]
						}
					}
				},
				{
					"name": "Check Tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Table information returned', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/check-tables",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"check-tables"
							]
						}
					}
				},
				{
					"name": "Test Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Statistics test successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('TotalTasks');",
									"    pm.expect(jsonData.TasksRetrieved).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/test-statistics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"test-statistics"
							]
						}
					}
				},
				{
					"name": "Check Task Triggers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Trigger check successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/check-task-triggers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"check-task-triggers"
							]
						}
					}
				},
				{
					"name": "Test Client Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Client creation test successful', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('clientId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/test-client-creation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"test-client-creation"
							]
						}
					}
				}
			]
		},
		{
			"name": "🛡️ Security & Error Handling Tests",
			"item": [
				{
					"name": "404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Error message present', function () {",
									"    pm.expect(pm.response.text()).to.include('404');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/nonexistent-endpoint",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"nonexistent-endpoint"
							]
						}
					}
				},
				{
					"name": "Unauthorized Access Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Unauthorized access blocked', function () {",
									"    const responseText = pm.response.text().toLowerCase();",
									"    pm.expect(responseText).to.include('unauthorized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							]
						}
					}
				},
				{
					"name": "SQL Injection Prevention Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('SQL injection prevented', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 401]);",
									"    // Should not return 500 (server error)",
									"    pm.expect(pm.response.code).to.not.equal(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin'; DROP TABLE Users; --\",\n    \"password\": \"test\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "XSS Prevention Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('XSS attempt handled safely', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test('Malicious script not reflected', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.not.include('<script>alert(\\'XSS\\');</script>');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"<script>alert('XSS');</script>\",\n    \"description\": \"XSS test task\",\n    \"priority\": \"High\",\n    \"status\": \"Pending\",\n    \"companyId\": \"11111111-1111-1111-1111-111111111111\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							]
						}
					}
				},
				{
					"name": "Invalid UUID Format Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Invalid UUID handled gracefully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
									"});",
									"",
									"pm.test('Appropriate error message', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/task/invalid-uuid-format",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task",
								"invalid-uuid-format"
							]
						}
					}
				},
				{
					"name": "Large Payload Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Large payload handled appropriately', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 413, 422]);",
									"});",
									"",
									"pm.test('Response time reasonable despite large payload', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Task\",\n    \"description\": \"{{$randomLoremParagraphs}}\".repeat(1000),\n    \"priority\": \"High\",\n    \"status\": \"Pending\",\n    \"companyId\": \"11111111-1111-1111-1111-111111111111\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							]
						}
					}
				}
			]
		},
		{
			"name": "⚡ Performance Tests",
			"item": [
				{
					"name": "Load Test - Get Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time under 300ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Pagination working properly', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('totalCount');",
									"    pm.expect(jsonData).to.have.property('pageNumber');",
									"    pm.expect(jsonData).to.have.property('pageSize');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/task?pageSize=100&pageNumber=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "100"
								},
								{
									"key": "pageNumber",
									"value": "1"
								}
							]
						}
					}
				},
				{
					"name": "Concurrent Request Simulation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Concurrent request handled', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time acceptable under load', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dashboard",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dashboard"
							]
						}
					}
				},
				{
					"name": "Search Performance Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Search response time acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test('Search results returned', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/task?search=test&pageSize=50",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "search",
									"value": "test"
								},
								{
									"key": "pageSize",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Filtering Performance Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Filter response time acceptable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"pm.test('Filtered results returned', function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/task?status=Pending&priority=High&sortBy=CreatedAt&sortDescending=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							],
							"query": [
								{
									"key": "status",
									"value": "Pending"
								},
								{
									"key": "priority",
									"value": "High"
								},
								{
									"key": "sortBy",
									"value": "CreatedAt"
								},
								{
									"key": "sortDescending",
									"value": "true"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "🧪 Data Validation Tests",
			"item": [
				{
					"name": "Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error for email', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"invalid-email-format\",\n    \"password\": \"Test@123\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"role\": \"User\",\n    \"companyId\": \"11111111-1111-1111-1111-111111111111\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register-test-user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register-test-user"
							]
						}
					}
				},
				{
					"name": "Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error for missing fields', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Task without title\",\n    \"priority\": \"High\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							]
						}
					}
				},
				{
					"name": "Invalid Date Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 or 422', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test('Date validation error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Task\",\n    \"description\": \"Task with invalid date\",\n    \"priority\": \"High\",\n    \"status\": \"Pending\",\n    \"dueDate\": \"invalid-date-format\",\n    \"companyId\": \"11111111-1111-1111-1111-111111111111\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							]
						}
					}
				},
				{
					"name": "Invalid Priority Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400 or 422', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"});",
									"",
									"pm.test('Priority validation error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Task\",\n    \"description\": \"Task with invalid priority\",\n    \"priority\": \"InvalidPriority\",\n    \"status\": \"Pending\",\n    \"companyId\": \"11111111-1111-1111-1111-111111111111\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							]
						}
					}
				}
			]
		},
		{
			"name": "🔄 Integration Flow Tests",
			"item": [
				{
					"name": "Complete Task Workflow",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This test will create a task and walk through its complete lifecycle"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Workflow task created', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test('Set workflow task ID', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.globals.set('workflowTaskId', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Workflow Test Task\",\n    \"description\": \"Task for testing complete workflow\",\n    \"priority\": \"Medium\",\n    \"status\": \"Pending\",\n    \"category\": \"Testing\",\n    \"estimatedHours\": 5,\n    \"dueDate\": \"2025-12-31T23:59:59Z\",\n    \"companyId\": \"11111111-1111-1111-1111-111111111111\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/task",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"task"
							]
						}
					}
				},
				{
					"name": "Complete Project-Client Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Project-Client integration successful', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test('Project linked to client', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('clientId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Integration Test Project\",\n    \"description\": \"Project for client integration testing\",\n    \"status\": \"Active\",\n    \"clientId\": \"{{clientId}}\",\n    \"startDate\": \"2025-01-01T00:00:00Z\",\n    \"endDate\": \"2025-12-31T23:59:59Z\",\n    \"budget\": 25000,\n    \"projectManagerId\": \"{{userId}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/project",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"project"
							]
						}
					}
				},
				{
					"name": "End-to-End User Journey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User journey completed successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('All user data accessible', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/{{userId}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"{{userId}}",
								"tasks"
							]
						}
					}
				}
			]
		},
		{
			"name": "🧹 Cleanup Operations",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Logout successful', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Session terminated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('successfully');",
									"    // Clear tokens",
									"    pm.collectionVariables.set('accessToken', '');",
									"    pm.collectionVariables.set('refreshToken', '');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					}
				}
			]
		}
	]
}